// UILabelExtension.swift
// the Code is generated by https://github.com/hhfa008/SwiftAI

import UIKit
extension SwiftCocoaDSL where Base :UILabel {
    @discardableResult
    public func text(_ text: String) -> Self {
        base.text = text
        return self
    }

    @discardableResult
    public func font(_ font: UIFont) -> Self {
        base.font = font
        return self
    }

    @discardableResult
    public func textColor(_ textColor: UIColor) -> Self {
        base.textColor = textColor
        return self
    }

    @discardableResult
    public func shadowColor(_ shadowColor: UIColor) -> Self {
        base.shadowColor = shadowColor
        return self
    }

    @discardableResult
    public func shadowOffset(_ shadowOffset: CGSize) -> Self {
        base.shadowOffset = shadowOffset
        return self
    }

    @discardableResult
    public func textAlignment(_ textAlignment: NSTextAlignment) -> Self {
        base.textAlignment = textAlignment
        return self
    }

    @discardableResult
    public func lineBreakMode(_ lineBreakMode: NSLineBreakMode) -> Self {
        base.lineBreakMode = lineBreakMode
        return self
    }

    @discardableResult
    public func attributedText(_ attributedText: NSAttributedString) -> Self {
        base.attributedText = attributedText
        return self
    }

    @discardableResult
    public func highlightedTextColor(_ highlightedTextColor: UIColor) -> Self {
        base.highlightedTextColor = highlightedTextColor
        return self
    }

    @discardableResult
    public func isHighlighted(_ isHighlighted: Bool) -> Self {
        base.isHighlighted = isHighlighted
        return self
    }

    @discardableResult
    public func isEnabled(_ isEnabled: Bool) -> Self {
        base.isEnabled = isEnabled
        return self
    }

    @discardableResult
    public func numberOfLines(_ numberOfLines: Int) -> Self {
        base.numberOfLines = numberOfLines
        return self
    }

    @discardableResult
    public func adjustsFontSizeToFitWidth(_ adjustsFontSizeToFitWidth: Bool) -> Self {
        base.adjustsFontSizeToFitWidth = adjustsFontSizeToFitWidth
        return self
    }

    @discardableResult
    public func baselineAdjustment(_ baselineAdjustment: UIBaselineAdjustment) -> Self {
        base.baselineAdjustment = baselineAdjustment
        return self
    }

    @discardableResult
    public func minimumScaleFactor(_ minimumScaleFactor: CGFloat) -> Self {
        base.minimumScaleFactor = minimumScaleFactor
        return self
    }

    @discardableResult
    public func allowsDefaultTighteningForTruncation(_ allowsDefaultTighteningForTruncation: Bool) -> Self {
        base.allowsDefaultTighteningForTruncation = allowsDefaultTighteningForTruncation
        return self
    }

    @discardableResult
    public func preferredMaxLayoutWidth(_ preferredMaxLayoutWidth: CGFloat) -> Self {
        base.preferredMaxLayoutWidth = preferredMaxLayoutWidth
        return self
    }
}
