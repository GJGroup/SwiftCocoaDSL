// UITextViewExtension.swift
// the Code is generated by https://github.com/hhfa008/SwiftAI

import UIKit
extension SwiftCocoaDSL where Base :UITextView {
    @discardableResult
    public func text(_ text: String) -> Self {
        base.text = text
        return self
    }

    @discardableResult
    public func font(_ font: UIFont) -> Self {
        base.font = font
        return self
    }

    @discardableResult
    public func textColor(_ textColor: UIColor) -> Self {
        base.textColor = textColor
        return self
    }

    @discardableResult
    public func textAlignment(_ textAlignment: NSTextAlignment) -> Self {
        base.textAlignment = textAlignment
        return self
    }

    @discardableResult
    public func selectedRange(_ selectedRange: NSRange) -> Self {
        base.selectedRange = selectedRange
        return self
    }

    @discardableResult
    public func isEditable(_ isEditable: Bool) -> Self {
        base.isEditable = isEditable
        return self
    }

    @discardableResult
    public func isSelectable(_ isSelectable: Bool) -> Self {
        base.isSelectable = isSelectable
        return self
    }

    @discardableResult
    public func dataDetectorTypes(_ dataDetectorTypes: UIDataDetectorTypes) -> Self {
        base.dataDetectorTypes = dataDetectorTypes
        return self
    }

    @discardableResult
    public func allowsEditingTextAttributes(_ allowsEditingTextAttributes: Bool) -> Self {
        base.allowsEditingTextAttributes = allowsEditingTextAttributes
        return self
    }

    @discardableResult
    public func attributedText(_ attributedText: NSAttributedString) -> Self {
        base.attributedText = attributedText
        return self
    }

    @discardableResult
    public func inputView(_ inputView: UIView) -> Self {
        base.inputView = inputView
        return self
    }

    @discardableResult
    public func inputAccessoryView(_ inputAccessoryView: UIView) -> Self {
        base.inputAccessoryView = inputAccessoryView
        return self
    }

    @discardableResult
    public func clearsOnInsertion(_ clearsOnInsertion: Bool) -> Self {
        base.clearsOnInsertion = clearsOnInsertion
        return self
    }

    @discardableResult
    public func textContainerInset(_ textContainerInset: UIEdgeInsets) -> Self {
        base.textContainerInset = textContainerInset
        return self
    }
}
