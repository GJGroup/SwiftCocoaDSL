// UIWebViewExtension.swift
// the Code is generated by https://github.com/hhfa008/SwiftAI

import UIKit
extension SwiftCocoaDSL where Base :UIWebView {
    @discardableResult
    public func scalesPageToFit(_ scalesPageToFit: Bool) -> Self {
        base.scalesPageToFit = scalesPageToFit
        return self
    }

    @discardableResult
    public func dataDetectorTypes(_ dataDetectorTypes: UIDataDetectorTypes) -> Self {
        base.dataDetectorTypes = dataDetectorTypes
        return self
    }

    @discardableResult
    public func allowsInlineMediaPlayback(_ allowsInlineMediaPlayback: Bool) -> Self {
        base.allowsInlineMediaPlayback = allowsInlineMediaPlayback
        return self
    }

    @discardableResult
    public func mediaPlaybackRequiresUserAction(_ mediaPlaybackRequiresUserAction: Bool) -> Self {
        base.mediaPlaybackRequiresUserAction = mediaPlaybackRequiresUserAction
        return self
    }

    @discardableResult
    public func mediaPlaybackAllowsAirPlay(_ mediaPlaybackAllowsAirPlay: Bool) -> Self {
        base.mediaPlaybackAllowsAirPlay = mediaPlaybackAllowsAirPlay
        return self
    }

    @discardableResult
    public func suppressesIncrementalRendering(_ suppressesIncrementalRendering: Bool) -> Self {
        base.suppressesIncrementalRendering = suppressesIncrementalRendering
        return self
    }

    @discardableResult
    public func keyboardDisplayRequiresUserAction(_ keyboardDisplayRequiresUserAction: Bool) -> Self {
        base.keyboardDisplayRequiresUserAction = keyboardDisplayRequiresUserAction
        return self
    }

    @discardableResult
    public func paginationMode(_ paginationMode: UIWebPaginationMode) -> Self {
        base.paginationMode = paginationMode
        return self
    }

    @discardableResult
    public func paginationBreakingMode(_ paginationBreakingMode: UIWebPaginationBreakingMode) -> Self {
        base.paginationBreakingMode = paginationBreakingMode
        return self
    }

    @discardableResult
    public func pageLength(_ pageLength: CGFloat) -> Self {
        base.pageLength = pageLength
        return self
    }

    @discardableResult
    public func gapBetweenPages(_ gapBetweenPages: CGFloat) -> Self {
        base.gapBetweenPages = gapBetweenPages
        return self
    }

    @discardableResult
    public func allowsPictureInPictureMediaPlayback(_ allowsPictureInPictureMediaPlayback: Bool) -> Self {
        base.allowsPictureInPictureMediaPlayback = allowsPictureInPictureMediaPlayback
        return self
    }

    @discardableResult
    public func allowsLinkPreview(_ allowsLinkPreview: Bool) -> Self {
        base.allowsLinkPreview = allowsLinkPreview
        return self
    }
}
